{"version":3,"sources":["webpack:///./src/components/song.tsx","webpack:///./src/components/song-list.tsx","webpack:///./src/store/song/actions.ts","webpack:///./src/containers/song-list-container.ts","webpack:///./src/components/hit.tsx","webpack:///./src/components/hit-list.tsx","webpack:///./src/store/hit/actions.ts","webpack:///./src/containers/hits-list-container.ts","webpack:///./src/api.ts","webpack:///./src/store/hit/sagas.ts","webpack:///./src/store/song/sagas.ts","webpack:///./src/store/hit/reducer.ts","webpack:///./src/store/song/reducer.ts","webpack:///./src/store/root-reducer.ts","webpack:///./src/store/index.ts","webpack:///./src/store/root-saga.ts","webpack:///./src/App.tsx","webpack:///./src/index.js"],"names":["title","imageUri","ListItem","style","maxHeight","src","alt","songs","loading","fetchSongsByArtist","artistId","onClick","Button","List","map","song","key","song_art_image_thumbnail_url","searchSongsByArtist","setSongs","state","list","dispatch","width","hits","fetchHits","debouncedFetchHits","onChange","e","target","value","Input","placeholder","type","CircularProgress","display","flexWrap","hit","result","primary_artist","id","full_title","song_art_image_url","setHits","setError","q","api","a","create","baseURL","headers","searchHits","get","fetchHitsWorker","payload","response","data","searchSongsByArtistWorker","console","info","error","action","sagaMiddleware","store","reducer","devTools","middleware","run","Container","fontFamily","maxWidth","createElement","document","getElementById"],"mappings":"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","file":"main.56eba59ab675bc5e78d5.js","sourcesContent":["import * as React from 'react';\nimport { ListItem } from '@material-ui/core';\n\nexport interface Props {\n    title: string;\n    imageUri: string;\n}\n\nconst Song: React.FC<Props> = ({ title, imageUri }) => (\n  <ListItem style={{ maxHeight: 90 }}>\n    <p>{title}</p>\n    <img src={imageUri} alt={title} />\n  </ListItem>\n);\n\nexport default Song;\n","import * as React from 'react';\nimport { Button, List } from '@material-ui/core';\nimport { Song as SongType } from '../models/song';\nimport Song from './song';\n\nexport interface StateProps {\n    songs: SongType[];\n    loading: boolean;\n}\n\nexport interface OwnProps {\n    artistId: number;\n}\n\nexport interface DispatchProps {\n    fetchSongsByArtist(artistId: number): void;\n}\n\nconst SongList: React.FC<StateProps & DispatchProps & OwnProps> = ({\n  songs, loading, fetchSongsByArtist, artistId,\n}) => {\n  const onClick = React.useCallback(() => {\n    fetchSongsByArtist(artistId);\n  }, []);\n  return (\n    <>\n      <Button onClick={onClick}>Show Artist Songs</Button>\n      {loading ? (<p>Loading ...</p>) : (\n        <List>\n          {songs.map((song) => (\n            <Song\n              key={song.title}\n              title={song.title}\n              imageUri={song.song_art_image_thumbnail_url}\n            />\n          ))}\n        </List>\n      )}\n    </>\n  );\n};\n\n\nexport default SongList;\n","import { createAction } from '@reduxjs/toolkit';\nimport { Song } from '../../models/song';\n\nexport const searchSongsByArtist = createAction<number>('search song by artist');\nexport const setSongs = createAction<Song[]>('set songs');\n","import { MapStateToProps, MapDispatchToProps, connect } from 'react-redux';\nimport SongList, { StateProps, OwnProps, DispatchProps } from '../components/song-list';\nimport { AppState } from '../store';\nimport { searchSongsByArtist } from '../store/song/actions';\n\n\nconst mapStateToProps: MapStateToProps<StateProps, OwnProps, AppState> = (state) => ({\n  songs: state.songs.list,\n  loading: state.songs.loading,\n});\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = (dispatch) => ({\n  fetchSongsByArtist: (artistId: number) => dispatch(searchSongsByArtist(artistId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SongList);\n","import * as React from 'react';\nimport SongList from '../containers/song-list-container';\n\ninterface Props {\n    artistId: number;\n    imageUri: string;\n    title: string;\n}\n\nconst Hit: React.FC<Props> = ({ artistId, imageUri, title }) => (\n  (\n    <div\n      style={{ width: 250 }}\n    >\n      <p>{title}</p>\n      <img\n        style={{\n          width: 210,\n        }}\n        src={imageUri}\n        alt=\"test\"\n      />\n      <SongList artistId={artistId} />\n    </div>\n  )\n);\n\n\nexport default Hit;\n","import * as React from 'react';\nimport debounce from 'lodash/debounce';\nimport { Input, CircularProgress } from '@material-ui/core';\nimport { Hit as HitType } from '../models/hit';\nimport Hit from './hit';\n\nexport interface StateProps {\n  hits: HitType[];\n  loading: boolean;\n}\n\nexport interface DispatchProps {\n  fetchHits(q: string): void;\n}\n\n\nconst HitsList: React.FC<StateProps & DispatchProps> = ({ hits, fetchHits, loading }) => {\n  const debouncedFetchHits = debounce(fetchHits, 300);\n  React.useEffect(() => {\n    fetchHits('Placebo');\n  }, []);\n  const onChange = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    debouncedFetchHits(e.target.value);\n  }, []);\n  return (\n    <>\n      <Input placeholder=\"Placebo\" onChange={onChange} type=\"text\" />\n      {loading ? (<CircularProgress />) : (\n        <div style={{\n          display: 'flex',\n          flexWrap: 'wrap',\n        }}\n        >\n          {\n          hits.map((hit) => (\n            <Hit\n              artistId={hit.result.primary_artist.id}\n              key={hit.result.id}\n              title={hit.result.full_title}\n              imageUri={hit.result.song_art_image_url}\n            />\n          ))\n      }\n        </div>\n\n      )}\n    </>\n\n  );\n};\n\nexport default HitsList;\n","import { createAction } from '@reduxjs/toolkit';\nimport { Hit } from '../../models/hit';\n\nexport const fetchHits = createAction<string>('fetch hits');\nexport const setHits = createAction<Hit[]>('set hits');\nexport const setError = createAction<string>('set error');\n","import { MapStateToProps, MapDispatchToProps, connect } from 'react-redux';\nimport HitsList, { StateProps, DispatchProps } from '../components/hit-list';\nimport { fetchHits } from '../store/hit/actions';\nimport { AppState } from '../store';\n\nconst mapStateToProps: MapStateToProps<StateProps, {}, AppState> = (state) => ({\n  hits: state.hits.hits,\n  loading: state.hits.loading,\n});\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, {}> = (dispatch) => ({\n  fetchHits: (q: string) => dispatch(fetchHits(q)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HitsList);\n","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://genius.p.rapidapi.com',\n  headers: {\n    'x-rapidapi-host': 'genius.p.rapidapi.com',\n    'x-rapidapi-key': '4138f1021fmsh75636ffd9147d90p17d1a5jsn8b3645b2de09',\n  },\n});\n\nexport const searchHits = (q: string) => api.get(`/search?q=${q}`);\nexport const searchSongsByArtist = (artistId: number) => api.get(`artists/${artistId}/songs`);\n","import { call, put } from 'redux-saga/effects';\nimport { AxiosResponse } from 'axios';\nimport { setHits, setError, fetchHits } from './actions';\nimport { searchHits } from '../../api';\nimport { HitsResponse } from '../../models/hit';\n\nexport function* fetchHitsWorker({ payload }: ReturnType<typeof fetchHits>) {\n  try {\n    const response: AxiosResponse<{response: HitsResponse}> = yield call(searchHits, payload);\n    yield put(setHits(response.data.response.hits));\n  } catch (e) {\n    yield put(setError('someError'));\n  }\n}\n","import { call, put } from 'redux-saga/effects';\nimport { AxiosResponse } from 'axios';\nimport { searchSongsByArtist, setSongs } from './actions';\nimport * as api from '../../api';\nimport { SongResponse } from '../../models/song';\n\nexport function* searchSongsByArtistWorker({ payload }: ReturnType<typeof searchSongsByArtist>) {\n  try {\n    const response: AxiosResponse<{response: SongResponse}> = yield call(api.searchSongsByArtist, payload);\n    yield put(setSongs(response.data.response.songs));\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.info(e);\n  }\n}\n","import { createReducer, PayloadAction } from '@reduxjs/toolkit';\nimport { fetchHits, setHits, setError } from './actions';\nimport { Hit } from '../../models/hit';\n\nexport type HitsState = Readonly<{\n  hits: Hit[];\n  error: string | null;\n  loading: boolean;\n}>\n\nexport const initialState: HitsState = {\n  hits: [],\n  error: null,\n  loading: false,\n};\n\nconst hitsReducer = createReducer(initialState, {\n  [fetchHits.type]: (state) => {\n    state.loading = true;\n  },\n  [setHits.type]: (state, action: PayloadAction<Hit[]>) => {\n    state.hits = action.payload;\n    state.loading = false;\n  },\n  [setError.type]: (state, action: PayloadAction<string>) => {\n    state.error = action.payload;\n    state.loading = false;\n  },\n});\n\n\nexport default hitsReducer;\n","import { createReducer, PayloadAction } from '@reduxjs/toolkit';\nimport { Song } from '../../models/song';\nimport { searchSongsByArtist, setSongs } from './actions';\n\nexport interface SongsState {\n    list: Song[];\n    loading: boolean;\n}\n\nexport const initialState: SongsState = {\n  list: [],\n  loading: false,\n};\n\nconst reducer = createReducer(initialState, {\n  [searchSongsByArtist.type]: (state) => {\n    state.loading = true;\n  },\n  [setSongs.type]: (state, action: PayloadAction<Song[]>) => {\n    state.list = action.payload;\n    state.loading = false;\n  },\n});\n\nexport default reducer;\n","import { combineReducers } from 'redux';\nimport hits from './hit/reducer';\nimport songs from './song/reducer';\n\nexport default combineReducers({\n  hits,\n  songs,\n});\n","import createSagaMiddleware from 'redux-saga';\nimport {\n  configureStore,\n  getDefaultMiddleware,\n} from '@reduxjs/toolkit';\nimport rootSaga from './root-saga';\nimport rootReducer from './root-reducer';\n\n\nconst sagaMiddleware = createSagaMiddleware();\n\n\nconst store = configureStore({\n  reducer: rootReducer,\n  devTools: true,\n  middleware: [...getDefaultMiddleware(), sagaMiddleware],\n});\n\n\nexport type AppState = ReturnType<typeof rootReducer>\n\nsagaMiddleware.run(rootSaga);\n\n\nexport default store;\n","import { all, takeLatest } from 'redux-saga/effects';\nimport { fetchHitsWorker } from './hit/sagas';\nimport { fetchHits } from './hit/actions';\nimport { searchSongsByArtist } from './song/actions';\nimport { searchSongsByArtistWorker } from './song/sagas';\n\nexport default function* rootSaga() {\n  yield all([\n    takeLatest(fetchHits.type, fetchHitsWorker),\n    takeLatest(searchSongsByArtist.type, searchSongsByArtistWorker),\n  ]);\n}\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { Container } from '@material-ui/core';\nimport Hits from './containers/hits-list-container';\nimport store from './store';\n\nconst App = () => (\n  <Provider store={store}>\n    <Container\n      style={{\n        fontFamily: 'Roboto',\n      }}\n      maxWidth=\"md\"\n    >\n      <Hits />\n    </Container>\n  </Provider>\n);\n\nexport default App;\n","import { render } from 'react-dom';\nimport React from 'react';\nimport App from './App';\n\nrender(React.createElement(App), document.getElementById('root'));\n"],"sourceRoot":""}