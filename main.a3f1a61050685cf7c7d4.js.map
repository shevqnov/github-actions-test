{"version":3,"sources":["webpack:///./src/components/hit.tsx","webpack:///./src/components/hit-list.tsx","webpack:///./src/store/hit/actions.ts","webpack:///./src/containers/hits-list-container.ts","webpack:///./src/api.ts","webpack:///./src/store/hit/sagas.ts","webpack:///./src/store/hit/reducer.ts","webpack:///./src/store/root-reducer.ts","webpack:///./src/store/index.ts","webpack:///./src/store/root-saga.ts","webpack:///./src/App.tsx","webpack:///./src/index.js"],"names":["artistId","imageUri","title","style","width","src","alt","hits","fetchHits","loading","debouncedFetchHits","onChange","e","target","value","type","display","flexWrap","map","hit","key","result","id","full_title","song_art_image_url","setHits","setError","state","dispatch","q","api","a","create","baseURL","headers","searchHits","get","fetchHitsWorker","payload","response","data","error","action","sagaMiddleware","store","reducer","devTools","middleware","run","createElement","document","getElementById"],"mappings":"+LA6Be,EArBc,SAAC,GAAE,EAAAA,S,IAAUC,EAAA,EAAAA,SAAUC,EAAA,EAAAA,MAElD,OAEI,uBACEC,MAAO,CAAEC,MAAO,MAEhB,yBAAIF,GACJ,uBACEC,MAAO,CACLC,MAAO,KAETC,IAAKJ,EACLK,IAAI,WC0BC,EAhCwC,SAAC,G,IAAEC,EAAA,EAAAA,KAAMC,EAAA,EAAAA,UAAWC,EAAA,EAAAA,QACnEC,EAAqB,IAASF,EAAW,KACzCG,EAAW,eAAkB,SAACC,GAClCF,EAAmBE,EAAEC,OAAOC,SAC3B,IACH,OACE,gCACE,yBAAOH,SAAUA,EAAUI,KAAK,SAC/BN,EAAW,uCACV,uBAAKN,MAAO,CACVa,QAAS,OACTC,SAAU,SAIVV,EAAKW,KAAI,SAACC,GAAQ,OAChB,gBAAC,EAAG,CACFnB,SAAS,OACToB,IAAKD,EAAIE,OAAOC,GAChBpB,MAAOiB,EAAIE,OAAOE,WAClBtB,SAAUkB,EAAIE,OAAOG,2B,OChCtB,EAAY,YAAqB,cACjCC,EAAU,YAAoB,YAC9BC,EAAW,YAAqB,aCS9B,eAToD,SAACC,GAAU,OAC5EpB,KAAMoB,EAAMpB,KAAKA,KACjBE,QAASkB,EAAMpB,KAAKE,YAG4C,SAACmB,GAAa,OAC9EpB,UAAW,SAACqB,GAAc,OAAAD,EAAS,EAAUC,QAGhC,CAA6C,G,wBCZtDC,E,OAAMC,EAAMC,OAAO,CACvBC,QAAS,gCACTC,QAAS,CACP,kBAAmB,wBACnB,iBAAkB,wDAITC,EAAa,SAACN,GAAc,OAAAC,EAAIM,IAAI,aAAaP,I,uiCCNvD,SAAUQ,EAAgB,G,MAAEC,EAAA,EAAAA,Q,kDAEd,O,sBAAA,GAAM,YAAKH,EAAYG,I,OACxC,OADMC,EAAW,SACjB,GAAM,YAAId,EAAQc,EAASC,KAAKD,SAAShC,Q,cAAzC,S,aAEA,O,SAAA,GAAM,YAAImB,EAAS,e,cAAnB,S,mlCCqBW,EAdK,YANmB,CACrCnB,KAAM,GACNkC,MAAO,KACPhC,SAAS,KAGmC,MAC3C,EAAUM,MAAO,SAACY,GACjBA,EAAMlB,SAAU,GAElB,EAACgB,EAAQV,MAAO,SAACY,EAAOe,GACtBf,EAAMpB,KAAOmC,EAAOJ,QACpBX,EAAMlB,SAAU,GAElB,EAACiB,EAASX,MAAO,SAACY,EAAOe,GACvBf,EAAMc,MAAQC,EAAOJ,QACrBX,EAAMlB,SAAU,G,ICvBL,4BAAgB,CAC7BF,KAAI,I,wLCKAoC,EAAiB,cAGjBC,EAAQ,YAAe,CAC3BC,QAAS,EACTC,UAAU,EACVC,WAAY,EAAI,cAAwB,CAAAJ,MAM1CA,EAAeK,KCjBA,W,kDACb,SAAM,YAAI,CACR,YAAW,EAAUjC,KAAMsB,M,cAD7B,S,WDmBa,QEbA,EANH,WAAM,OAChB,kBAAC,IAAQ,CAACO,MAAO,GACf,kBAAC,EAAI,QCHT,iBAAO,IAAMK,cAAc,GAAMC,SAASC,eAAe,W","file":"main.a3f1a61050685cf7c7d4.js","sourcesContent":["import * as React from 'react';\n\ninterface Props {\n    artistId: string;\n    imageUri: string;\n    title: string;\n}\n\nconst Hit: React.FC<Props> = ({ artistId, imageUri, title }) => {\n  const test = 'test';\n  return (\n    (\n      <div\n        style={{ width: 250 }}\n      >\n        <p>{title}</p>\n        <img\n          style={{\n            width: 210,\n          }}\n          src={imageUri}\n          alt=\"test\"\n        />\n      </div>\n    )\n  );\n};\n\n\nexport default Hit;\n","import * as React from 'react';\nimport debounce from 'lodash/debounce';\nimport { Hit as HitType } from '../models/hit';\nimport Hit from './hit';\n\nexport interface StateProps {\n  hits: HitType[];\n  loading: boolean;\n}\n\nexport interface DispatchProps {\n  fetchHits(q: string): void;\n}\n\n\nconst HitsList: React.FC<StateProps & DispatchProps> = ({ hits, fetchHits, loading }) => {\n  const debouncedFetchHits = debounce(fetchHits, 300);\n  const onChange = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    debouncedFetchHits(e.target.value);\n  }, []);\n  return (\n    <>\n      <input onChange={onChange} type=\"text\" />\n      {loading ? (<p>Loading...</p>) : (\n        <div style={{\n          display: 'flex',\n          flexWrap: 'wrap',\n        }}\n        >\n          {\n          hits.map((hit) => (\n            <Hit\n              artistId=\"test\"\n              key={hit.result.id}\n              title={hit.result.full_title}\n              imageUri={hit.result.song_art_image_url}\n            />\n          ))\n      }\n        </div>\n\n      )}\n    </>\n\n  );\n};\n\nexport default HitsList;\n","import { createAction } from '@reduxjs/toolkit';\nimport { Hit } from '../../models/hit';\n\nexport const fetchHits = createAction<string>('fetch hits');\nexport const setHits = createAction<Hit[]>('set hits');\nexport const setError = createAction<string>('set error');\n","import { MapStateToProps, MapDispatchToProps, connect } from 'react-redux';\nimport HitsList, { StateProps, DispatchProps } from '../components/hit-list';\nimport { fetchHits } from '../store/hit/actions';\nimport { AppState } from '../store';\n\nconst mapStateToProps: MapStateToProps<StateProps, {}, AppState> = (state) => ({\n  hits: state.hits.hits,\n  loading: state.hits.loading,\n});\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, {}> = (dispatch) => ({\n  fetchHits: (q: string) => dispatch(fetchHits(q)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HitsList);\n","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://genius.p.rapidapi.com',\n  headers: {\n    'x-rapidapi-host': 'genius.p.rapidapi.com',\n    'x-rapidapi-key': '4138f1021fmsh75636ffd9147d90p17d1a5jsn8b3645b2de09',\n  },\n});\n\nexport const searchHits = (q: string) => api.get(`/search?q=${q}`);\nexport const searchSongsByArtist = (artistId: string) => api.get(`artists/${artistId}/songs`);\n","import { call, put } from 'redux-saga/effects';\nimport { setHits, setError, fetchHits } from './actions';\nimport { searchHits } from '../../api';\n\nexport function* fetchHitsWorker({ payload }: ReturnType<typeof fetchHits>) {\n  try {\n    const response = yield call(searchHits, payload);\n    yield put(setHits(response.data.response.hits));\n  } catch (e) {\n    yield put(setError('someError'));\n  }\n}\n","import { createReducer, PayloadAction } from '@reduxjs/toolkit';\nimport { fetchHits, setHits, setError } from './actions';\nimport { Hit } from '../../models/hit';\n\nexport interface HitsState {\n    hits: Hit[];\n    error: string | null;\n    loading: boolean;\n  }\n\nexport const initialState: HitsState = {\n  hits: [],\n  error: null,\n  loading: false,\n};\n\nconst hitsReducer = createReducer(initialState, {\n  [fetchHits.type]: (state) => {\n    state.loading = true;\n  },\n  [setHits.type]: (state, action: PayloadAction<Hit[]>) => {\n    state.hits = action.payload;\n    state.loading = false;\n  },\n  [setError.type]: (state, action: PayloadAction<string>) => {\n    state.error = action.payload;\n    state.loading = false;\n  },\n});\n\nexport default hitsReducer;\n","import { combineReducers } from 'redux';\nimport hits from './hit/reducer';\n\nexport default combineReducers({\n  hits,\n});\n","import createSagaMiddleware from 'redux-saga';\nimport {\n  configureStore,\n  getDefaultMiddleware,\n} from '@reduxjs/toolkit';\nimport rootSaga from './root-saga';\nimport rootReducer from './root-reducer';\n\n\nconst sagaMiddleware = createSagaMiddleware();\n\n\nconst store = configureStore({\n  reducer: rootReducer,\n  devTools: true,\n  middleware: [...getDefaultMiddleware(), sagaMiddleware],\n});\n\n\nexport type AppState = ReturnType<typeof rootReducer>\n\nsagaMiddleware.run(rootSaga);\n\n\nexport default store;\n","import { all, takeLatest } from 'redux-saga/effects';\nimport { fetchHitsWorker } from './hit/sagas';\nimport { fetchHits } from './hit/actions';\n\nexport default function* rootSaga() {\n  yield all([\n    takeLatest(fetchHits.type, fetchHitsWorker),\n  ]);\n}\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport Hits from './containers/hits-list-container';\nimport store from './store';\n\nconst App = () => (\n  <Provider store={store}>\n    <Hits />\n  </Provider>\n);\n\nexport default App;\n","import { render } from 'react-dom';\nimport React from 'react';\nimport App from './App';\n\nrender(React.createElement(App), document.getElementById('root'));\n"],"sourceRoot":""}