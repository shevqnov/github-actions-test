{"version":3,"sources":["webpack:///./src/components/Card.tsx","webpack:///./src/store/index.ts","webpack:///./src/components/Hits.tsx","webpack:///./src/SimpleForm.tsx","webpack:///./src/App.tsx","webpack:///./src/index.js"],"names":["title","text","image","src","alt","fetchHits","setHits","setError","hitsReducer","hits","error","loading","type","state","action","payload","reducer","devTools","dispatch","q","a","get","headers","response","data","style","display","flexWrap","map","hit","key","result","id","full_title","width","song_art_image_url","validators","onSubmit","useCallback","e","currentTarget","value","name","someItems","Item","store","item","v","createElement","document","getElementById"],"mappings":"8KAiBe,EATe,SAAC,G,IAAEA,EAAA,EAAAA,MAAOC,EAAA,EAAAA,KAAMC,EAAA,EAAAA,MAAY,OACxD,6BACE,4BAAKF,GACL,2BAAIC,GACJ,yBAAKE,IAAKD,EAAOE,IAAI,W,q2CCuBnBC,EAAY,YAAqB,cACjCC,EAAU,YAAoB,YAC9BC,EAAW,YAAqB,aAiBhCC,EAAc,YAzBQ,CAC1BC,KAAM,GACNC,MAAO,KACPC,SAAS,KAsBmC,MAC3CN,EAAUO,MAAO,SAACC,GACjBA,EAAMF,SAAU,GAElB,EAACL,EAAQM,MAAO,SAACC,EAAOC,GACtBD,EAAMJ,KAAOK,EAAOC,QACpBF,EAAMF,SAAU,GAElB,EAACJ,EAASK,MAAO,SAACC,EAAOC,GACvBD,EAAMH,MAAQI,EAAOC,QACrBF,EAAMF,SAAU,G,IAWL,EAND,YAAe,CAC3BK,QAASR,EACTS,UAAU,ICnCG,EAhCQ,WACrB,IAAMR,EAAO,aAAY,SAACI,GAAiB,OAAAA,EAAMJ,QAC3CS,EAAW,cAIjB,OAHA,aAAgB,WDgCY,IAACC,EC/B3BD,GD+B2BC,EC/BH,aD+BiB,SAC3CD,GAA4E,0C,wDAEzD,O,sBAAA,GAAM,EAAAE,EAAMC,IAAI,0CAA0CF,EAAK,CAC9EG,QAAS,CACP,kBAAmB,wBACnB,iBAAkB,yD,cAHhBC,EAAW,SAMjBL,EAASZ,EAAQiB,EAASC,KAAKD,SAASd,O,6BAExCS,EAASX,EAAS,c,mCCzCjB,IAED,uBAAKkB,MAAO,CACVC,QAAS,OACTC,SAAU,WAINlB,EAAKmB,KAAI,SAACC,GAAQ,OAChB,uBACEC,IAAKD,EAAIE,OAAOC,IAEhB,yBAAIH,EAAIE,OAAOE,YACf,uBACER,MAAO,CACLS,MAAO,KAET/B,IAAK0B,EAAIE,OAAOI,mBAChB/B,IAAI,eCJL,EAfqB,SAAC,G,IAAEgC,EAAA,EAAAA,WAC/BC,EAAW,IAAMC,aAAY,SAACC,GAClCH,EAAW,GAAGG,EAAEC,cAAcC,SAC7B,IACH,OACE,0BAAMJ,SAAUA,GACd,sCACA,2BAAOzB,KAAK,OAAO8B,KAAK,QACxB,sCACA,2BAAO9B,KAAK,SAAS8B,KAAK,QAC1B,4BAAQ9B,KAAK,UAAQ,YCXrB+B,EAAY,CAChB,SACA,SACA,UAGIC,EAAO,SAAC,G,IAAEF,EAAA,EAAAA,KAA2B,OAAC,4BAAKA,IAelC,EAbH,WAAM,OAChB,kBAAC,IAAQ,CAACG,MAAO,GACf,4BACGF,EAAUf,KAAI,SAACkB,GAAS,OACvB,kBAACF,EAAI,CAACd,IAAKgB,EAAMJ,KAAMI,OAEzB,kBAAC,EAAI,CAAC7C,KAAK,gcAAgcD,MAAM,aAAaE,MAAM,OACpe,kBAAC,EAAU,CAACkC,WAAY,CAAC,WAAM,UAAM,SAACW,GAAM,MAAa,iBAANA,MACnD,kBAAC,EAAI,SCnBX,iBAAO,IAAMC,cAAc,GAAMC,SAASC,eAAe,W","file":"main.37db24549fe998e3f2a4.js","sourcesContent":["import React from 'react';\n\ninterface Props {\n  title: string;\n  text: string;\n  image: string;\n}\n\nconst Card: React.FC<Props> = ({ title, text, image }) => (\n  <div>\n    <h3>{title}</h3>\n    <p>{text}</p>\n    <img src={image} alt=\"test\" />\n  </div>\n);\n\n\nexport default Card;\n","import axios from 'axios';\n\nimport {\n  configureStore,\n  createAction,\n  createReducer,\n  PayloadAction,\n} from '@reduxjs/toolkit';\nimport { Dispatch } from 'react';\n\nexport interface State {\n  hits: Hit[];\n  error: string | null;\n  loading: boolean;\n}\n\ntype HitType = 'song' | 'album' | 'artist'\n\ninterface Hit {\n  highlights: [];\n  index: string;\n  type: HitType;\n  result: {\n    id: string;\n    full_title: string;\n    song_art_image_url: string;\n  };\n}\n\nconst initialState: State = {\n  hits: [],\n  error: null,\n  loading: false,\n};\n\nconst fetchHits = createAction<string>('fetch hits');\nconst setHits = createAction<Hit[]>('set hits');\nconst setError = createAction<string>('set error');\n\nexport const fetchHitsThunk = (q: string) => async (\n  dispatch: Dispatch<ReturnType<typeof setHits> | ReturnType<typeof setError>>) => {\n  try {\n    const response = await axios.get(`https://genius.p.rapidapi.com/search?q=${q}`, {\n      headers: {\n        'x-rapidapi-host': 'genius.p.rapidapi.com',\n        'x-rapidapi-key': '4138f1021fmsh75636ffd9147d90p17d1a5jsn8b3645b2de09',\n      },\n    });\n    dispatch(setHits(response.data.response.hits));\n  } catch (e) {\n    dispatch(setError('someError'));\n  }\n};\n\nconst hitsReducer = createReducer(initialState, {\n  [fetchHits.type]: (state) => {\n    state.loading = true;\n  },\n  [setHits.type]: (state, action: PayloadAction<Hit[]>) => {\n    state.hits = action.payload;\n    state.loading = false;\n  },\n  [setError.type]: (state, action: PayloadAction<string>) => {\n    state.error = action.payload;\n    state.loading = false;\n  },\n});\n\n\nconst store = configureStore({\n  reducer: hitsReducer,\n  devTools: true,\n});\n\n\nexport default store;\n","import * as React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { State, fetchHitsThunk } from '../store';\n\nconst Hits: React.FC = () => {\n  const hits = useSelector((state: State) => state.hits);\n  const dispatch = useDispatch();\n  React.useEffect(() => {\n    dispatch(fetchHitsThunk('portishead'));\n  }, []);\n  return (\n    <div style={{\n      display: 'flex',\n      flexWrap: 'nowrap',\n    }}\n    >\n      {\n          hits.map((hit) => (\n            <div\n              key={hit.result.id}\n            >\n              <p>{hit.result.full_title}</p>\n              <img\n                style={{\n                  width: 210,\n                }}\n                src={hit.result.song_art_image_url}\n                alt=\"test\"\n              />\n            </div>\n          ))\n      }\n    </div>\n  );\n};\n\nexport default Hits;\n","import React from 'react';\n\ntype Validator = (value: string) => boolean\n\ninterface Props {\n    validators: Validator[];\n}\n\nconst SimpleForm: React.FC<Props> = ({ validators }) => {\n  const onSubmit = React.useCallback((e: React.FormEvent<HTMLFormElement>) => {\n    validators[1](e.currentTarget.value);\n  }, []);\n  return (\n    <form onSubmit={onSubmit}>\n      <label>foo</label>\n      <input type=\"text\" name=\"foo\" />\n      <label>bar</label>\n      <input type=\"number\" name=\"bar\" />\n      <button type=\"submit\">submit</button>\n    </form>\n  );\n};\n\nexport default SimpleForm;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport Card from './components/Card';\nimport Hits from './components/Hits';\nimport SimpleForm from './SimpleForm';\nimport store from './store';\n\nconst someItems = [\n  'item 1',\n  'item 2',\n  'item 3',\n];\n\nconst Item = ({ name }: {name: string}) => (<li>{name}</li>);\n\nconst App = () => (\n  <Provider store={store}>\n    <ul>\n      {someItems.map((item) => (\n        <Item key={item} name={item} />\n      ))}\n      <Card text=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\" title=\"Test title\" image=\"no\" />\n      <SimpleForm validators={[() => true, (v) => typeof v === 'string']} />\n      <Hits />\n    </ul>\n  </Provider>\n);\n\nexport default App;\n","import { render } from 'react-dom';\nimport React from 'react';\nimport App from './App';\n\nrender(React.createElement(App), document.getElementById('root'));\n"],"sourceRoot":""}